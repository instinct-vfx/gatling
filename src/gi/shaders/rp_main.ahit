#extension GL_GOOGLE_include_directive: require
#extension GL_EXT_ray_tracing: require
#extension GL_EXT_nonuniform_qualifier: enable
#extension GL_EXT_samplerless_texture_functions: require
#extension GL_EXT_shader_16bit_storage: require
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#extension GL_EXT_shader_explicit_arithmetic_types_int16: require
#extension GL_EXT_nonuniform_qualifier: require
#extension GL_EXT_shader_explicit_arithmetic_types_int64: require
#extension GL_EXT_buffer_reference: require
#extension GL_EXT_scalar_block_layout: require

#include "colormap.glsl"

#include "mdl_types.glsl"
#include "rp_main_descriptors.glsl"

#include "mdl_interface.glsl"
#include "mdl_shading_state.glsl"
#include "rp_main_payload.glsl"

#pragma mdl_generated_code

#ifndef SHADOW_TEST
layout(location = PAYLOAD_INDEX_SHADE) rayPayloadInEXT ShadeRayPayload rayPayload;
#else
layout(location = PAYLOAD_INDEX_SHADOW) rayPayloadInEXT ShadowRayPayload rayPayload;
#endif

hitAttributeEXT vec2 baryCoord;

void main()
{
  State shading_state;
  vec2 hit_bc = baryCoord;
  bool isFrontFace;
  setup_mdl_shading_state(hit_bc, shading_state, isFrontFace);

  float opacity = mdl_cutout_opacity(shading_state);

#ifndef SHADOW_TEST
#if AOV_ID == AOV_ID_DEBUG_OPACITY
  rayPayload.radiance = (opacity == 0.0) ? vec3(1.0) : colormap_viridis(opacity);
  rayPayload.bitfield |= SHADE_RAY_PAYLOAD_TERMINATE_FLAG;
  return;
#endif
#endif

#ifdef RAND_4D
  float k = rng4d_next4f(rayPayload.rng_state).x;
#else
  float k = rng1d_next1f(rayPayload.rng_state);
#endif
  if (k > opacity)
  {
    ignoreIntersectionEXT;
  }
}
